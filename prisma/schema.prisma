// ðŸ“‹ find a way to automatically visualize database schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(cuid())
  name         String       @unique
  passwordHash String
  collections  Collection[]
  Access       Access[]
}

model Collection {
  id             Int       @id @default(autoincrement())
  name           String    @unique
  createdAt      DateTime  @default(now())
  updateAt       DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  ripeness       Int       @default(0) // 7 degrees: Seedling, Green, Yellow, Red, Rotten, Rotten2, Rotten3
  timeOfNextExam DateTime? // can be null, which means the collection is not ready for exam
  memos          Memo[]
  tags           Tag[]
  accesses       Access[]
}

// ðŸ“‹ Access model is for sharing collections with other users
model Access {
  id           Int        @id @default(autoincrement())
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId Int
  user         User       @relation(fields: [userId], references: [id])
  userId       String
}

model Memo {
  id           Int        @id @default(autoincrement())
  title        String
  cue          String?
  answer       String
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId Int
  progress     Progress?
}

model Progress {
  id        Int     @id @default(autoincrement())
  memo      Memo    @relation(fields: [memoId], references: [id])
  memoId    Int     @unique
  attention Int     @default(0) // 0 for no attention, 1 for attention, 2 for high attention
  ripeness  Int     @default(0) // 7 degrees: Seedling, Green, Yellow, Red, Rotten, Rotten2, Rotten3
  scores    Score[]
}

model Tag {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  aliase     String?
  Collection Collection[]
}

model Score {
  id         Int      @id @default(autoincrement())
  progressId Int
  score      Int // -1, 0, 1 or 2: -1 for wrong, 0 for skipping, 1 for right, 2 for perfect
  createdAt  DateTime @default(now())
  progress   Progress @relation(fields: [progressId], references: [id])
}
